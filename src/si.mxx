export module si;

import <array>;
import <compare>;
import <ratio>;
import <ostream>;

using std::ratio, std::ratio_add, std::ratio_subtract, std::ratio_multiply;

template<typename>
struct is_ratio : std::false_type {};

template<intmax_t N, intmax_t D>
struct is_ratio<ratio<N, D>> : std::true_type {};

template<typename T>
inline constexpr bool is_ratio_v{is_ratio<T>::value};

export namespace si {

template< typename Kilogram = ratio<0>
        , typename Metre    = ratio<0>
        , typename Second   = ratio<0>
        , typename Ampere   = ratio<0>
        , typename Kelvin   = ratio<0>
        , typename Mole     = ratio<0>
        , typename Candela  = ratio<0>
        >
requires is_ratio_v<Kilogram>
      && is_ratio_v<Metre>
      && is_ratio_v<Second>
      && is_ratio_v<Ampere>
      && is_ratio_v<Kelvin>
      && is_ratio_v<Mole>
      && is_ratio_v<Candela>
class Unit {
    template<typename U>
    static constexpr auto f(std::string s) -> std::string {
        const auto n{U::num}, d{U::den};
        std::array<const char *, 10> superscripts{
            "⁰", "¹", "²", "³", "⁴", "⁵", "⁶", "⁷", "⁸", "⁹"
        };
        if (n == 0) {
            return {};
        } else if (d == 1) {
            if (n == 1) {
                return s;
            } else if (std::abs(n) < 10) {
                return s + (n < 0 ? "⁻" : "") + superscripts[std::abs(n)];
            }
        }
        return "TODO";
    }
public:
    using kg  = Kilogram;
    using m   = Metre;
    using s   = Second;
    using A   = Ampere;
    using K   = Kelvin;
    using mol = Mole;
    using cd  = Candela;

    static constexpr auto to_string() -> std::string {
        return f<kg>("kg") + f<m>("m") + f<s>("s") + f<A>("A")
            + f<K>("K") + f<mol>("mol") + f<cd>("cd");
    }
};

template<typename>
struct is_unit : std::false_type {};

template< typename kg
        , typename m
        , typename s
        , typename A
        , typename K
        , typename mol
        , typename cd
        >
struct is_unit<Unit<kg, m, s, A, K, mol, cd>> : std::true_type {};

template<typename T>
inline constexpr bool is_unit_v{is_unit<T>::value};

using Scalar   = Unit<>;
using Kilogram = Unit<ratio<1>>;
using Meter    = Unit<ratio<0>, ratio<1>>;
using Second   = Unit<ratio<0>, ratio<0>, ratio<1>>;
using Ampere   = Unit<ratio<0>, ratio<0>, ratio<0>, ratio<1>>;
using Kelvin   = Unit<ratio<0>, ratio<0>, ratio<0>, ratio<0>, ratio<1>>;
using Mole     = Unit<ratio<0>, ratio<0>, ratio<0>, ratio<0>, ratio<0>, ratio<1>>;
using Candela  = Unit<ratio<0>, ratio<0>, ratio<0>, ratio<0>, ratio<0>, ratio<0>, ratio<1>>;

template<typename U, typename V>
requires is_unit_v<U> && is_unit_v<V>
using UnitMul = Unit< ratio_add<typename U::kg, typename V::kg>
                    , ratio_add<typename U::m, typename V::m>
                    , ratio_add<typename U::s, typename V::s>
                    , ratio_add<typename U::A, typename V::A>
                    , ratio_add<typename U::K, typename V::K>
                    , ratio_add<typename U::mol, typename V::mol>
                    , ratio_add<typename U::cd, typename V::cd>
                    >;

template<typename U, typename V>
requires is_unit_v<U> && is_unit_v<V>
using UnitDiv = Unit< ratio_subtract<typename U::kg, typename V::kg>
                    , ratio_subtract<typename U::m, typename V::m>
                    , ratio_subtract<typename U::s, typename V::s>
                    , ratio_subtract<typename U::A, typename V::A>
                    , ratio_subtract<typename U::K, typename V::K>
                    , ratio_subtract<typename U::mol, typename V::mol>
                    , ratio_subtract<typename U::cd, typename V::cd>
                    >;

template<typename U>
requires is_unit_v<U>
using UnitInv = UnitDiv<Scalar, U>;

template<typename U, typename K>
requires is_unit_v<U> && is_ratio_v<K>
using UnitExp = Unit< ratio_multiply<typename U::kg, K>
                    , ratio_multiply<typename U::m, K>
                    , ratio_multiply<typename U::s, K>
                    , ratio_multiply<typename U::A, K>
                    , ratio_multiply<typename U::K, K>
                    , ratio_multiply<typename U::mol, K>
                    , ratio_multiply<typename U::cd, K>
                    >;

template<typename U>
requires is_unit_v<U>
struct Measurement {
    double value;

    constexpr Measurement(double value) : value(value) {}

    constexpr auto operator<=>(const Measurement &rhs) const {
        return value <=> rhs.value;
    }

    constexpr auto operator==(const Measurement &rhs) const {
        return value == rhs.value;
    }

    constexpr friend auto operator<<(std::ostream &out, const Measurement &m) -> std::ostream & {
        return out << m.value << " " << U::to_string();
    }

    constexpr auto operator+=(const Measurement &rhs) -> Measurement & {
        value += rhs.value;
        return *this;
    }

    constexpr friend auto operator+(Measurement lhs, const Measurement &rhs) -> Measurement {
        lhs += rhs;
        return lhs;
    }

    constexpr auto operator-=(const Measurement &rhs) -> Measurement & {
        value -= rhs.value;
        return *this;
    }

    constexpr friend auto operator-(Measurement lhs, const Measurement &rhs) -> Measurement {
        lhs -= rhs;
        return lhs;
    }

    template<typename V>
    constexpr auto operator*(const Measurement<V> &rhs) const
        -> Measurement<UnitMul<U, V>>
    {
        return Measurement<UnitMul<U, V>>{value * rhs.value};
    }

    constexpr auto operator*=(double rhs) -> Measurement & {
        value *= rhs;
        return *this;
    }

    constexpr friend auto operator*(Measurement lhs, double rhs) -> Measurement {
        lhs *= rhs;
        return lhs;
    }

    constexpr friend auto operator*(double lhs, Measurement rhs) -> Measurement {
        return rhs * lhs;
    }

    template<typename V>
    constexpr auto operator/(const Measurement<V> &rhs) const
        -> Measurement<UnitDiv<U, V>>
    {
        return Measurement<UnitDiv<U, V>>{value / rhs.value};
    }

    constexpr auto operator/=(double rhs) -> Measurement & {
        value /= rhs;
        return *this;
    }

    constexpr friend auto operator/(Measurement lhs, double rhs) -> Measurement {
        lhs /= rhs;
        return lhs;
    }

    constexpr friend auto operator/(double lhs, Measurement rhs) -> Measurement {
        return rhs / lhs;
    }
};

constexpr auto operator+(Measurement<Scalar> lhs, double rhs) -> Measurement<Scalar> {
    lhs.value += rhs;
    return lhs;
}

constexpr auto operator+(double lhs, Measurement<Scalar> rhs) -> Measurement<Scalar> {
    return rhs + lhs;
}

constexpr auto operator-(Measurement<Scalar> lhs, double rhs) -> Measurement<Scalar> {
    lhs.value -= rhs;
    return lhs;
}

constexpr auto operator-(double lhs, Measurement<Scalar> rhs) -> Measurement<Scalar> {
    return rhs - lhs;
}

using Hertz = UnitInv<Second>;
using Newton = UnitDiv<UnitMul<Kilogram, Meter>, UnitExp<Second, ratio<2>>>;
using Joule = UnitMul<Newton, Meter>;
using Coulomb = UnitMul<Ampere, Second>;
using Radian = UnitDiv<Meter, Meter>;
using Steradian = UnitDiv<UnitExp<Meter, ratio<2>>, UnitExp<Meter, ratio<2>>>;
using Lumen = UnitMul<Candela, Steradian>;
using Watt = UnitDiv<Joule, Second>;
using Pascal = UnitDiv<Newton, UnitExp<Meter, ratio<2>>>;
using Volt = UnitDiv<Watt, Ampere>;
using Farad = UnitDiv<Coulomb, Volt>;
using Ohm = UnitDiv<Volt, Ampere>;
using Siemens = UnitInv<Ohm>;
using Weber = UnitMul<Volt, Second>;
using Tesla = UnitDiv<Weber, UnitExp<Meter, ratio<2>>>;
using Henry = UnitDiv<Weber, Ampere>;
using Lux = UnitDiv<Lumen, UnitExp<Meter, ratio<2>>>;
using Becquerel = UnitInv<Second>;
using Gray = UnitDiv<Joule, Kilogram>;
using Sievert = UnitDiv<Joule, Kilogram>;
using Katal = UnitDiv<Mole, Second>;

constexpr auto operator""_s(long double x) -> Measurement<Second> {
    return Measurement<Second>{static_cast<double>(x)};
}

constexpr auto operator""_m(long double x) -> Measurement<Meter> {
    return Measurement<Meter>{static_cast<double>(x)};
}

constexpr auto operator""_kg(long double x) -> Measurement<Kilogram> {
    return Measurement<Kilogram>{static_cast<double>(x)};
}

constexpr auto operator""_A(long double x) -> Measurement<Ampere> {
    return Measurement<Ampere>{static_cast<double>(x)};
}

constexpr auto operator""_K(long double x) -> Measurement<Kelvin> {
    return Measurement<Kelvin>{static_cast<double>(x)};
}

constexpr auto operator""_mol(long double x) -> Measurement<Mole> {
    return Measurement<Mole>{static_cast<double>(x)};
}

constexpr auto operator""_cd(long double x) -> Measurement<Candela> {
    return Measurement<Candela>{static_cast<double>(x)};
}

constexpr auto operator""_Hz(long double x) -> Measurement<Hertz> {
    return Measurement<Hertz>{static_cast<double>(x)};
}

constexpr auto operator""_rad(long double x) -> Measurement<Radian> {
    return Measurement<Radian>{static_cast<double>(x)};
}

constexpr auto operator""_sr(long double x) -> Measurement<Steradian> {
    return Measurement<Steradian>{static_cast<double>(x)};
}

constexpr auto operator""_N(long double x) -> Measurement<Newton> {
    return Measurement<Newton>{static_cast<double>(x)};
}

constexpr auto operator""_Pa(long double x) -> Measurement<Pascal> {
    return Measurement<Pascal>{static_cast<double>(x)};
}

constexpr auto operator""_J(long double x) -> Measurement<Joule> {
    return Measurement<Joule>{static_cast<double>(x)};
}

constexpr auto operator""_W(long double x) -> Measurement<Watt> {
    return Measurement<Watt>{static_cast<double>(x)};
}

constexpr auto operator""_C(long double x) -> Measurement<Coulomb> {
    return Measurement<Coulomb>{static_cast<double>(x)};
}

constexpr auto operator""_V(long double x) -> Measurement<Volt> {
    return Measurement<Volt>{static_cast<double>(x)};
}

constexpr auto operator""_F(long double x) -> Measurement<Farad> {
    return Measurement<Farad>{static_cast<double>(x)};
}

constexpr auto operator""_S(long double x) -> Measurement<Siemens> {
    return Measurement<Siemens>{static_cast<double>(x)};
}

constexpr auto operator""_Wb(long double x) -> Measurement<Weber> {
    return Measurement<Weber>{static_cast<double>(x)};
}

constexpr auto operator""_T(long double x) -> Measurement<Tesla> {
    return Measurement<Tesla>{static_cast<double>(x)};
}

constexpr auto operator""_H(long double x) -> Measurement<Henry> {
    return Measurement<Henry>{static_cast<double>(x)};
}

constexpr auto operator""_lm(long double x) -> Measurement<Lumen> {
    return Measurement<Lumen>{static_cast<double>(x)};
}

constexpr auto operator""_lx(long double x) -> Measurement<Lux> {
    return Measurement<Lux>{static_cast<double>(x)};
}

constexpr auto operator""_Bq(long double x) -> Measurement<Becquerel> {
    return Measurement<Becquerel>{static_cast<double>(x)};
}

constexpr auto operator""_Gy(long double x) -> Measurement<Gray> {
    return Measurement<Gray>{static_cast<double>(x)};
}

constexpr auto operator""_Sv(long double x) -> Measurement<Sievert> {
    return Measurement<Sievert>{static_cast<double>(x)};
}

constexpr auto operator""_kat(long double x) -> Measurement<Katal> {
    return Measurement<Katal>{static_cast<double>(x)};
}

inline constexpr Measurement<Hertz> ΔνCs{9'192'631'770};
inline constexpr Measurement<UnitDiv<Meter, Second>> c{299'792'458};
inline constexpr Measurement<UnitMul<Joule, Second>> h{6.626'070'15e-34};
inline constexpr Measurement<Coulomb> e{1.602'176'634e-19};
inline constexpr Measurement<UnitDiv<Joule, Kelvin>> k{1.380'649e-23};
inline constexpr Measurement<UnitInv<Mole>> NA{6.022'140'76e23};
inline constexpr Measurement<UnitDiv<Lumen, Watt>> Kcd{683};

}
